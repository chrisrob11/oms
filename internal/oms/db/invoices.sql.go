// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: invoices.sql

package db

import (
	"context"
	"database/sql"
)

const adjustInvoice = `-- name: AdjustInvoice :exec
UPDATE oms.invoices
SET total_adjustments = $2
WHERE id = $1
`

type AdjustInvoiceParams struct {
	ID               int32
	TotalAdjustments sql.NullString
}

func (q *Queries) AdjustInvoice(ctx context.Context, arg AdjustInvoiceParams) error {
	_, err := q.db.ExecContext(ctx, adjustInvoice, arg.ID, arg.TotalAdjustments)
	return err
}

const createInvoice = `-- name: CreateInvoice :one

INSERT INTO oms.invoices (campaign_id, total_booked_amount, total_actual_amount, total_adjustments, started_at, ended_at, issued_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id
`

type CreateInvoiceParams struct {
	CampaignID        int32
	TotalBookedAmount sql.NullString
	TotalActualAmount sql.NullString
	TotalAdjustments  sql.NullString
	StartedAt         sql.NullTime
	EndedAt           sql.NullTime
	IssuedAt          sql.NullTime
}

// invoice.sql
func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createInvoice,
		arg.CampaignID,
		arg.TotalBookedAmount,
		arg.TotalActualAmount,
		arg.TotalAdjustments,
		arg.StartedAt,
		arg.EndedAt,
		arg.IssuedAt,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteInvoice = `-- name: DeleteInvoice :exec
DELETE FROM oms.invoices WHERE id = $1
`

func (q *Queries) DeleteInvoice(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteInvoice, id)
	return err
}

const getInvoice = `-- name: GetInvoice :one
SELECT id, campaign_id, total_booked_amount, total_actual_amount, total_adjustments, started_at, ended_at, issued_at, created_at, updated_at FROM oms.invoices WHERE id = $1
`

func (q *Queries) GetInvoice(ctx context.Context, id int32) (OmsInvoice, error) {
	row := q.db.QueryRowContext(ctx, getInvoice, id)
	var i OmsInvoice
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.TotalBookedAmount,
		&i.TotalActualAmount,
		&i.TotalAdjustments,
		&i.StartedAt,
		&i.EndedAt,
		&i.IssuedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listInvoices = `-- name: ListInvoices :many
SELECT id, campaign_id, total_booked_amount, total_actual_amount, total_adjustments, started_at, ended_at, issued_at, created_at, updated_at FROM oms.invoices 
WHERE id > $1
Order by id
LIMIT $2
`

type ListInvoicesParams struct {
	ID    int32
	Limit int32
}

func (q *Queries) ListInvoices(ctx context.Context, arg ListInvoicesParams) ([]OmsInvoice, error) {
	rows, err := q.db.QueryContext(ctx, listInvoices, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OmsInvoice
	for rows.Next() {
		var i OmsInvoice
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.TotalBookedAmount,
			&i.TotalActualAmount,
			&i.TotalAdjustments,
			&i.StartedAt,
			&i.EndedAt,
			&i.IssuedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
