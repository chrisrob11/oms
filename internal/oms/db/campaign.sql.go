// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: campaign.sql

package db

import (
	"context"
	"database/sql"
)

const createCampaign = `-- name: CreateCampaign :one
INSERT INTO oms.campaigns (name, started_at, ended_at, archiving)
VALUES ($1, $2, $3, $4)
RETURNING id, name, started_at, ended_at, archiving, created_at, updated_at
`

type CreateCampaignParams struct {
	Name      string
	StartedAt sql.NullTime
	EndedAt   sql.NullTime
	Archiving sql.NullBool
}

func (q *Queries) CreateCampaign(ctx context.Context, arg CreateCampaignParams) (OmsCampaign, error) {
	row := q.db.QueryRowContext(ctx, createCampaign,
		arg.Name,
		arg.StartedAt,
		arg.EndedAt,
		arg.Archiving,
	)
	var i OmsCampaign
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartedAt,
		&i.EndedAt,
		&i.Archiving,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createCampaignWithID = `-- name: CreateCampaignWithID :one

INSERT INTO oms.campaigns (name, id, started_at, ended_at, archiving)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, started_at, ended_at, archiving, created_at, updated_at
`

type CreateCampaignWithIDParams struct {
	Name      string
	ID        int32
	StartedAt sql.NullTime
	EndedAt   sql.NullTime
	Archiving sql.NullBool
}

// campaign.sql
func (q *Queries) CreateCampaignWithID(ctx context.Context, arg CreateCampaignWithIDParams) (OmsCampaign, error) {
	row := q.db.QueryRowContext(ctx, createCampaignWithID,
		arg.Name,
		arg.ID,
		arg.StartedAt,
		arg.EndedAt,
		arg.Archiving,
	)
	var i OmsCampaign
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartedAt,
		&i.EndedAt,
		&i.Archiving,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCampaign = `-- name: DeleteCampaign :exec
DELETE FROM oms.campaigns WHERE id = $1
`

func (q *Queries) DeleteCampaign(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCampaign, id)
	return err
}

const getCampaign = `-- name: GetCampaign :one
SELECT id, name, started_at, ended_at, archiving, created_at, updated_at FROM oms.campaigns WHERE id = $1
`

func (q *Queries) GetCampaign(ctx context.Context, id int32) (OmsCampaign, error) {
	row := q.db.QueryRowContext(ctx, getCampaign, id)
	var i OmsCampaign
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartedAt,
		&i.EndedAt,
		&i.Archiving,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCampaigns = `-- name: ListCampaigns :many
SELECT id, name, started_at, ended_at, archiving, created_at, updated_at FROM oms.campaigns 
WHERE archiving = false AND id > $1
Order by id
LIMIT $2
`

type ListCampaignsParams struct {
	ID    int32
	Limit int32
}

func (q *Queries) ListCampaigns(ctx context.Context, arg ListCampaignsParams) ([]OmsCampaign, error) {
	rows, err := q.db.QueryContext(ctx, listCampaigns, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OmsCampaign
	for rows.Next() {
		var i OmsCampaign
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StartedAt,
			&i.EndedAt,
			&i.Archiving,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCampaign = `-- name: UpdateCampaign :exec
UPDATE oms.campaigns
SET name = $1, started_at = $2, ended_at = $3, archiving = $4
WHERE id = $5
`

type UpdateCampaignParams struct {
	Name      string
	StartedAt sql.NullTime
	EndedAt   sql.NullTime
	Archiving sql.NullBool
	ID        int32
}

func (q *Queries) UpdateCampaign(ctx context.Context, arg UpdateCampaignParams) error {
	_, err := q.db.ExecContext(ctx, updateCampaign,
		arg.Name,
		arg.StartedAt,
		arg.EndedAt,
		arg.Archiving,
		arg.ID,
	)
	return err
}
